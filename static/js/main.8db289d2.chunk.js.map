{"version":3,"sources":["action/index.js","components/ButtonDone.jsx","components/ButtonDelete.jsx","components/Post.jsx","components/Date.jsx","components/Field.jsx","App.js","reducer/index.js","store/index.js","index.js"],"names":["addPost","value","type","payload","ButtonDone","className","onDone","onClick","ButtonDelete","onDelete","Post","props","dispatch","useDispatch","children","name","done","id","deletePost","DateTodo","date","Date","addedZero","correction","resultValue","useState","toLocaleTimeString","time","setTime","useEffect","setInterval","curDate","getDate","curMonth","getMonth","getFullYear","getCurDate","Input","setValue","getPost","onChange","e","target","onKeyDown","code","console","log","App","posts","useSelector","state","postReducer","localStorage","setItem","JSON","stringify","length","map","item","defaultState","getItem","parse","ADD_POST","UPDATE_DONE","DELETE_POST","rootReducer","combineReducers","action","slice","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"wLAKeA,G,MALC,SAACC,GAAD,MAAY,CACxBC,KAAM,WACNC,QAASF,K,OCFE,SAASG,EAAT,GAA4C,IAAtBC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,OAE5C,OACI,qBAAKD,UAAWA,EAAWE,QAAS,kBAAMD,OCHnC,SAASE,EAAT,GAAgD,IAAxBH,EAAuB,EAAvBA,UAAWI,EAAY,EAAZA,SAE9C,OACI,qBAAKJ,UAAWA,EAAWE,QAAS,kBAAME,OCInC,SAASC,EAAKC,GACzB,IAAMC,EAAWC,cAEjB,EAAuBF,EAAMG,SAArBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACNC,EAAON,EAAPM,GAUR,OACI,qBAAKZ,UAAU,eAAf,SACI,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAYW,EAA6B,yBAAtB,oBAAxB,SACKD,IAEL,sBAAKV,UAAU,uBAAf,UACI,cAACD,EAAD,CAAYC,UAAYW,EAAqC,kCAA9B,4BAC3BV,OAhBD,WACfM,EHP6B,CACjCV,KAAM,cACNC,QGKwBQ,OAiBR,cAACH,EAAD,CAAcH,UAAU,8BACpBI,SAfC,WACjBG,EHNkB,SAACK,GAAD,MAAS,CAC/Bf,KAAM,cACNC,QAASc,GGIIC,CAAWD,e,WChBb,SAASE,IACpB,IAAMC,EAAO,IAAIC,KAEjB,SAASC,EAAUrB,GAAwB,IAAjBsB,EAAgB,uDAAH,EAC7BC,EAAcvB,EAAQsB,EAC5B,OAAIC,GAAe,EACT,IAAN,OAAWA,GAEJA,EAIf,IAMA,EAAwBC,oBAAS,IAAIJ,MAAOK,sBAA5C,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,WACNC,aAAY,kBAAMF,GAAQ,IAAIP,MAAOK,wBAAuB,OAC7D,CAACC,IAGA,qCACI,qBAAKtB,UAAU,cAAf,SAdW,WACf,IAAI0B,EAAUT,EAAUF,EAAKY,WACzBC,EAAWX,EAAUF,EAAKc,WAAY,GAC1C,MAAM,GAAN,OAAUH,EAAV,YAAqBE,EAArB,YAAiCb,EAAKe,eAY7BC,KACL,qBAAK/B,UAAU,cAAf,SACKsB,OC3BF,SAASU,IACpB,IAAMzB,EAAWC,cACjB,EAA0BY,mBAAS,IAAnC,mBAAOxB,EAAP,KAAcqC,EAAd,KAMMC,EAAU,WACRtC,GACAW,EAASZ,EAAQ,CAAEe,KAAMd,EAAOe,MAAM,KAE1CsB,EAAS,KAGb,OACI,qCACI,uBAAOjC,UAAU,eAAeJ,MAAOA,EAAOuC,SAbtC,SAACC,GACbH,EAASG,EAAEC,OAAOzC,QAaV0C,UAAW,SAACF,GAAD,MAAkB,UAAXA,EAAEG,MAA8B,KAAV3C,EAAesC,IAAY,QACvE,wBAAQlC,UAAU,aAAaE,QAAS,kBAAMgC,KAC1CI,UAAW,SAACF,GAAD,OAAOI,QAAQC,IAAIL,IADlC,iECfG,SAASM,IACtB,IAAMC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYH,SAMrD,OAJAnB,qBAAU,WACRuB,aAAaC,QAAQ,QAASC,KAAKC,UAAUP,MAC5C,CAACA,IAGF,qBAAK3C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,eAAd,wBACA,qBAAKA,UAAU,cAAf,SACE,cAACc,EAAD,MAEF,qBAAKd,UAAU,gBAAf,SACE,cAAC,EAAD,MAED2C,EAAMQ,OAAS,EACd,8BAEIR,EAAMS,KAAI,SAACC,EAAMzC,GAAP,OAAc,cAACP,EAAD,CAAMO,GAAIA,EAAV,SAAyCyC,GAAzC,UAAsBA,EAAK3C,MAA3B,OAAkCE,SAI9D,qBAAKZ,UAAU,uBAAf,0G,yBChCRsD,EAAe,CACjBX,MAAQI,aAAaQ,QAAQ,SAAgBN,KAAKO,MAAMT,aAAaQ,QAAQ,UAArC,IAItCE,EAAW,WACbC,EAAc,cACdC,EAAc,cAqBHC,EAJKC,YAAgB,CAChCf,YAhBgB,WAAmC,IAAlCD,EAAiC,uDAAzBS,EAAcQ,EAAW,uCAClD,OAAQA,EAAOjE,MACX,KAAK4D,EACD,OAAO,2BAAKZ,GAAZ,IAAmBF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmBmB,EAAOhE,YACtD,KAAK4D,EACD,OAAO,2BACAb,GADP,IACcF,MAAM,GAAD,mBAAME,EAAMF,MAAMoB,MAAM,EAAGD,EAAOhE,QAAQc,KAA1C,4BAAoDkD,EAAOhE,QAAQW,UAAnE,IAA6EE,MAAOmD,EAAOhE,QAAQW,SAASE,QAA5G,YAAuHkC,EAAMF,MAAMoB,MAAMD,EAAOhE,QAAQc,GAAK,OAEpL,KAAK+C,EACD,OAAO,2BAAKd,GAAZ,IAAmBF,MAAM,GAAD,mBAAME,EAAMF,MAAMoB,MAAM,EAAGD,EAAOhE,UAAlC,YAA+C+C,EAAMF,MAAMoB,MAAMD,EAAOhE,QAAU,OAC9G,QACI,OAAO+C,MClBJmB,EADDC,YAAYL,GCI1BM,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.8db289d2.chunk.js","sourcesContent":["const addPost = (value) => ({\r\n    type: \"ADD_POST\",\r\n    payload: value\r\n})\r\n\r\nexport default addPost;\r\n\r\nexport const updateDone = (data) => ({\r\n    type: \"UPDATE_DONE\",\r\n    payload: data\r\n})\r\n\r\nexport const deletePost = (id) => ({\r\n    type: \"DELETE_POST\",\r\n    payload: id\r\n})","export default function ButtonDone({ className, onDone }) {\r\n\r\n    return (\r\n        <div className={className} onClick={() => onDone()}></div>\r\n    )\r\n\r\n}","export default function ButtonDelete({ className, onDelete }) {\r\n\r\n    return (\r\n        <div className={className} onClick={() => onDelete()}></div>\r\n    )\r\n\r\n}","import { useDispatch } from \"react-redux\";\r\nimport { updateDone } from \"../action\";\r\nimport ButtonDone from \"./ButtonDone\";\r\nimport ButtonDelete from \"./ButtonDelete\";\r\nimport { deletePost } from './../action/index';\r\n\r\n\r\nexport default function Post(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const { name, done } = props.children;\r\n    const { id } = props;\r\n\r\n    const changeDone = () => {\r\n        dispatch(updateDone(props));\r\n    }\r\n\r\n    const deleteMyPost = () => {\r\n        dispatch(deletePost(id));\r\n    };\r\n\r\n    return (\r\n        <div className=\"field__block\">\r\n            <div className=\"field__block-inner\">\r\n                <div className={!done ? \"field__block-text\" : \"field__block-text done\"} >\r\n                    {name}\r\n                </div>\r\n                <div className=\"field__block-buttons\">\r\n                    <ButtonDone className={!done ? \"field__block-btn btn-done\" : \"field__block-btn btn-done_check\"}\r\n                        onDone={changeDone}\r\n                    />\r\n                    <ButtonDelete className=\"field__block-btn btn-delete\"\r\n                        onDelete={deleteMyPost}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function DateTodo() {\r\n    const date = new Date();\r\n\r\n    function addedZero(value, correction = 0) {\r\n        const resultValue = value + correction;\r\n        if (resultValue <= 9) {\r\n            return `0${resultValue}`;\r\n        } else {\r\n            return resultValue;\r\n        }\r\n    }\r\n\r\n    const getCurDate = () => {\r\n        let curDate = addedZero(date.getDate());\r\n        let curMonth = addedZero(date.getMonth(), 1);\r\n        return `${curDate}.${curMonth}.${date.getFullYear()}`;\r\n    };\r\n\r\n    const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n\r\n    useEffect(() => {\r\n        setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n    }, [time]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"field__date\">\r\n                {getCurDate()}</div>\r\n            <div className=\"field__time\">\r\n                {time}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport addPost from '../action';\r\n\r\nexport default function Input() {\r\n    const dispatch = useDispatch();\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const newPost = (e) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const getPost = () => {\r\n        if (value) {\r\n            dispatch(addPost({ name: value, done: false }));\r\n        }\r\n        setValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input className=\"field__input\" value={value} onChange={newPost}\r\n                onKeyDown={(e) => e.code === \"Enter\" && value !== \"\" ? getPost() : null} />\r\n            <button className=\"field__btn\" onClick={() => getPost()}\r\n                onKeyDown={(e) => console.log(e)}\r\n            >Добавить</button>\r\n        </>\r\n    )\r\n}","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport './App.scss';\nimport Post from './components/Post';\nimport DateTodo from './components/Date';\nimport Field from './components/Field';\n\n\nexport default function App() {\n  const posts = useSelector(state => state.postReducer.posts);\n\n  useEffect(() => {\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  }, [posts]);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <div className=\"field\">\n          <div className=\"field__inner\">\n            <h1 className=\"field__title\">TODO list </h1>\n            <div className=\"field__wrap\">\n              <DateTodo />\n            </div>\n            <div className=\"field__header\">\n              <Field />\n            </div>\n            {posts.length > 0 ?\n              <div>\n                {\n                  posts.map((item, id) => <Post id={id} key={`${item.name}${id}`}>{item}</Post>)\n                }\n              </div>\n              :\n              <div className=\"field__block-alttext\">Список дел пуст...</div>\n            }\n          </div>\n        </div>\n      </div >\n    </div>\n  );\n};","import { combineReducers } from \"redux\";\r\n\r\nconst defaultState = {\r\n    posts: !localStorage.getItem(\"posts\") ? [] : JSON.parse(localStorage.getItem(\"posts\"))\r\n}\r\n\r\n\r\nconst ADD_POST = \"ADD_POST\",\r\n    UPDATE_DONE = \"UPDATE_DONE\",\r\n    DELETE_POST = \"DELETE_POST\";\r\n\r\nconst postReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return { ...state, posts: [...state.posts, action.payload] };\r\n        case UPDATE_DONE:\r\n            return {\r\n                ...state, posts: [...state.posts.slice(0, action.payload.id), { ...action.payload.children, done: !action.payload.children.done }, ...state.posts.slice(action.payload.id + 1)]\r\n            };\r\n        case DELETE_POST:\r\n            return { ...state, posts: [...state.posts.slice(0, action.payload), ...state.posts.slice(action.payload + 1)] }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n    postReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./../reducer\";\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"../src/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}